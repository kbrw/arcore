#!/bin/bash

strip_quotes() {
  local len=${#1} quotes=$'[\'"]' str=${!1}

  if [[ ${str:0:1} = ${str: -1} && ${str:0:1} = $quotes ]]; then
    printf -v "$1" %s "${str:1:-1}"
  fi
}

add_udev_rule() {
    # Add an udev rules file to the initcpio image. Dependencies on binaries
    # will be discovered and added.
    #   $1: path to rules file (or name of rules file)

    local rules= rule= key= value= binary=

    rules=$(PATH=./rules.d:/usr/lib/udev/rules.d:/lib/udev/rules.d type -P "$1")
    if [[ -z $rules ]]; then
        # complain about not found rules
        return 1
    fi

    if [[ "$rules" == ./rules.d/* ]]; then
      add_file "$rules" "/usr/lib/udev/$rules"
    else
      add_file "$rules"
    fi

    while IFS=, read -ra rule; do
        # skip empty lines, comments
        [[ -z $rule || $rule = @(+([[:space:]])|#*) ]] && continue

        for pair in "${rule[@]}"; do
            IFS=' =' read -r key value <<< "$pair"
            case $key in
                RUN@({program}|+)|IMPORT{program}|ENV{REMOVE_CMD})
                    strip_quotes 'value'
                    # just take the first word as the binary name
                    binary=${value%% *}
                    [[ ${binary:0:1} == '$' ]] && continue
                    if [[ ${binary:0:1} != '/' ]]; then
                        binary=$(PATH=/usr/lib/udev:/lib/udev type -P "$binary")
                    fi
                    add_binary "$binary"
                    ;;
            esac
        done
    done <"$rules"
}

add_systemd_unit() {
    # Add a systemd unit file to the initcpio image. Hard dependencies on binaries
    # and other unit files will be discovered and added.
    #   $1: path to rules file (or name of rules file)

    local unit= rule= entry= key= value= binary= dep=

    unit=$(PATH=./system:/usr/lib/systemd/system:/lib/systemd/system type -P "$1")
    if [[ -z $unit ]]; then
        # complain about not found unit file
        return 1
    fi

    if [[ "$unit" == ./system/* ]]; then
      add_file "$unit" "/usr/lib/systemd/$unit"
    else
      add_file "$unit"
    fi

    while IFS='=' read -r key values; do
        read -ra values <<< "$values"

        case $key in
            Requires|OnFailure)
                # only add hard dependencies (not Wants)
                map add_systemd_unit "${values[@]}"
                ;;
            Exec*)
                # don't add binaries unless they are required
                if [[ ${values[0]:0:1} != '-' ]]; then
		    binpath=$(echo "${values[0]}" | sed -e 's/^!*\(.*\)$/\1/')
                    add_binary "$binpath"
                fi
                ;;
        esac

    done <"$unit"

    # preserve reverse soft dependency
    for dep in {/usr,}/lib/systemd/system/*.wants/${unit##*/}; do
        if [[ -L $dep ]]; then
            add_symlink "$dep"
        fi
    done

    # add hard dependencies
    if [[ -d $unit.requires ]]; then
        for dep in "$unit".requires/*; do
            add_systemd_unit ${dep##*/}
        done
    fi
}

add_systemd_drop_in() {
    local unit=$1 dropin_name=$2

    mkdir -p "$BUILDROOT/etc/systemd/system/$unit.d"
    cat >"$BUILDROOT/etc/systemd/system/$unit.d/$2.conf"
}
